1 ДОБАВИТЬ РЕПОЗИТОРИЙ В ЛОКАЛЬНЫЙ РЕПОЗИТОРИЙ
Ошибка No such remote 'origin' означает, что в вашем локальном репозитории не существует удаленного репозитория с именем origin. В таком случае, вы не можете изменить его URL-адрес с помощью команды git remote set-url.
Возможно, вы еще не добавили удаленный репозиторий к своему локальному репозиторию. Чтобы добавить удаленный репозиторий, используйте команду git remote add:
scssCopy code
git remote add origingit@github.com:worjava/IsEmpty.git 
Замените worjava/IsEmpty.git на URL-адрес вашего удаленного репозитория. После этого вы можете попробовать изменить URL-адрес удаленного репозитория с помощью команды git remote set-url origin, как вы пытались сделать ранее.

УДАЛИТ ВЕТКУ НА РЕПАЗИТОРИИ $ git push origin --delete project2.1


git remote set-url origin git@github.com:worjava/FirstRepository.git
 команда для активации в консоле  
Команда git status показывает, что файл CODe.txt был удален, но не проиндексирован. Вы можете использовать команду git add CODe.txt для добавления его в индекс и готовности к коммиту. Если файл уже удален из рабочей директории, то его можно удалить с помощью команды git rm CODe.txt, а затем закоммитить изменения с помощью git commit -m "Удален файл CODe.txt"
ЕСЛИ не пушится запушь с начала с удаленного !!!!
Ошибка, которую вы получили при выполнении команды git push, указывает на то, что удаленный репозиторий содержит изменения, которых у вас нет локально. Это обычно возникает, когда другой разработчик уже отправил изменения в удаленный репозиторий и вы пытаетесь отправить свои изменения поверх этих изменений.
Для того, чтобы решить эту проблему, вы можете выполнить команду git pull, чтобы скачать изменения из удаленного репозитория и объединить их с вашими локальными изменениями. Если вы столкнулись с конфликтами слияния, вам нужно будет решить их вручную и затем выполнить команду git push, чтобы отправить изменения на удаленный репозиторий.
Выполните команду git pull, чтобы получить изменения из удаленного репозитория и объединить их с вашими локальными изменениями:
Ошибка если репозитрии не слияются
та ошибка возникает при попытке объединения двух несвязанных историй разных репозиториев. Это может произойти, например, когда вы пытаетесь выполнить git pull для репозитория, который вы уже клонировали, но в то же время этот репозиторий был изменен или перезапущен на удаленном сервере.
Если вы уверены, что хотите объединить истории, вы можете выполнить команду git pull --allow-unrelated-histories origin master, чтобы принудительно выполнить объединение. Однако, будьте осторожны, так как это может привести к потере данных или искажению истории репозитория.
Если вы не уверены, что делать, лучше связаться с владельцем репозитория или другими участниками команды и выяснить, как лучше решить проблему.
git pull --allow-unrelated-histories origin master
УДАЛЕНИЕ ВЕТКИ В УДАЛЕННОМ РЕПОЗ git push origin --delete add-smart
При каждом удалении комит
Git берет на себя слияние разных версий файлов Система контроля версий у нас есть вся история изменений файлов 
Git log – отображает все коммиты
Git diff – разница состояний 
Head – текущее состояние проекта 
HEAD текущее состояние 
Git reset – hard HEAD^^(или можно взять хеш коммита)
Git reser (по умолчанию)-
https://github.com/worjava/Calculator.git
Чтобы проверить наличие SSH-ключа в вашей системе, выполните следующие действия:
1.	Откройте терминал на вашем компьютере.
2.	Введите следующую команду: ls -al ~/.ssh
3.	Если у вас уже есть SSH-ключ, то вы увидите файлы с названиями id_rsa и id_rsa.pub. Файл id_rsa содержит приватный ключ, а файл id_rsa.pub содержит публичный ключ.
Если вы не видите файлов id_rsa и id_rsa.pub, значит у вас еще нет SSH-ключа. Вы можете сгенерировать новый ключ с помощью команды ssh-keygen.

 Команда git remote set не существует. Вместо этого вы можете использовать команду git remote set-url, чтобы изменить URL-адрес вашего удаленного репозитория на GitHub.git remote set-url origin git@github.com:worjava/Calculator.git 

Поэтому перед отправкой своих изменений вы должны сначала получить последние изменения из удаленного репозитория с помощью команды git pull origin master. Это позволит объединить ваши изменения с теми, которые уже есть в удаленном репозитории, и избежать конфликтов при отправке. После этого вы можете повторно выполнить команду git push origin master для отправки своих изменений в удаленный репозиторий.



Три режима git reset
В зависимости от того, какой параметр вы используете с командой «git reset», есть три различных режима:
1.	Soft reset: этот режим перемещает указатель HEAD на указанную точку, но не меняет индекс или рабочий каталог. Это означает, что все изменения, сделанные вами после этой точки, останутся в индексе и будут отображаться как готовые к коммиту.
2.	Mixed reset: этот режим перемещает указатель HEAD на указанную точку и сбрасывает индекс, но не изменяет рабочий каталог. Это означает, что все изменения, сделанные вами после этой точки, будут сброшены из индекса и отображаться как изменения в неотслеживаемых файлах.
3.	Hard reset: этот режим перемещает указатель HEAD на указанную точку, сбрасывает индекс и рабочий каталог. Это означает, что все изменения, сделанные вами после этой точки, будут удалены и не будут отображаться в индексе или рабочем каталоге.
Важно помнить, что команда «git reset» может изменять историю коммитов, поэтому ее следует использовать с осторожностью.
Git checkout
git checkout - это команда в Git, которая позволяет переключаться между ветками в вашем репозитории Git. Кроме того, она может использоваться для возврата к предыдущему коммиту или ветке, отката изменений в файлах и т.д.
перемещение между индексами гита
Команда git checkout имеет несколько различных вариантов использования, но одним из самых распространенных является переключение на другую ветку. Например, если у вас есть две ветки, main и feature, и вы хотите переключиться на ветку feature, вы можете выполнить следующую команду в Git-консоли:
Если вы хотите создать новую ветку и переключиться на нее, то можно использовать следующую команду:
Кроме того, git checkout может быть использована для отмены изменений, сделанных в файлах. Например, если вы случайно внесли изменения в файл, вы можете отменить их и вернуться к последней сохраненной версии файла, используя следующую команду:
Обратите внимание, что при использовании этой команды все изменения в файле будут потеряны, поэтому убедитесь, что вы действительно хотите отменить все изменения в файле.
Наконец, git checkout может быть использована для перехода к предыдущему коммиту. Например, если вы хотите вернуться к коммиту, который вы сделали несколько команд назад, вы можете использовать следующую команду:
~3 
В этом примере мы переключаемся на коммит, который был три коммита назад от текущей позиции HEAD.
Удаление изменений 
Команда git checkout -- . используется для отмены изменений во всех файлах в рабочем каталоге, которые не были добавлены в индекс Git (staged), то есть изменений в файлах, которые находятся в состоянии «modified».
Когда вы работаете с Git, вы можете вносить изменения в файлы в вашем рабочем каталоге. Если вы не добавили эти изменения в индекс Git, то они не будут сохранены при следующем коммите. Чтобы отменить эти изменения, вы можете использовать команду git checkout -- ., которая откатит все изменения в рабочем каталоге до последнего коммита.
Опция—указывает Git на то, что после нее идут пути к файлам, которые вы хотите изменить. В данном случае . означает текущий каталог, то есть все файлы в нем.
Когда вы используете команду git checkout -- ., Git заменит изменения в файлах на содержимое, которое было сохранено в последнем коммите. Это действие не может быть отменено, поэтому будьте осторожны при использовании этой команды и убедитесь, что вы действительно хотите отменить все изменения в файлах в вашем рабочем каталоге.
Доп параметры  commit
В консоли Git можно использовать различные дополнительные параметры при выполнении команды ‘git commit`. Некоторые из них:
- `-m «message»` - позволяет добавить краткое описание изменений в комментарии к коммиту. Например: ‘git commit -m «Added new feature»`
- `-a` - автоматически добавляет все измененные файлы в индекс перед созданием коммита. Например: ‘git commit -a -m «Updated documentation»`
- `--amend` - позволяет изменить последний коммит. Например: ‘git commit—amend -m “Fixed typo in documentation”‘
- `-S` - позволяет подписать коммит с помощью GPG-ключа. Например: ‘git commit -S -m “Added new feature”‘
- `-C <commit>` - создает новый коммит на основе существующего. Например: ‘git commit -C abc123 -m «Fixed issue with feature XYZ»`
- `--no-verify` - позволяет создать коммит, игнорируя хуки пред-коммита. Например: ‘git commit—no-verify -m “Added new feature”‘
Git clean
Команда `git reset` не удаляет файлы из рабочего каталога, она лишь сбрасывает состояние индекса до последнего коммита. 
Если файлы были добавлены в индекс, то после выполнения `git reset` они будут удалены из индекса, но останутся в рабочем каталоге. 
Если вы хотите удалить файлы из рабочего каталога и индекса, вы можете использовать команду `git rm`. 
Однако, будьте осторожны, так как `git rm` удалит файлы навсегда.

Команда `git clean` используется для удаления неотслеживаемых файлов из рабочей директории Git. Это могут быть файлы, которые не были добавлены в индекс Git или игнорируются в файле `.gitignore`.

Когда вы работаете с Git, вы можете создавать множество временных файлов, которые не должны быть добавлены в репозиторий. Например, это могут быть файлы, созданные во время компиляции, файлы журналов, временные файлы редакторов и т.д. Команда `git clean` позволяет удалить все эти файлы из рабочей директории.

Команда `git clean` поддерживает несколько опций, которые позволяют настроить ее поведение. Например, вы можете использовать опцию `-n` для предварительного просмотра файлов, которые будут удалены, или опцию `-f` для принудительного удаления файлов без подтверждения.

Запомните, что команда `git clean` может быть опасной, так как она удаляет файлы без возможности восстановления. Поэтому, перед ее использованием, убедитесь, что вы понимаете, как она работает, и что вы не удаляете важные файлы.

Работа с удаленным репозиторием
Работа с удаленным репозиторием в Git консоле происходит через команды, которые позволяют скачивать данные из удаленного репозитория, отправлять изменения в удаленный репозиторий и управлять удаленными ветками.
Вот несколько основных команд для работы с удаленным репозиторием:
1.	git clone <url>: клонирует удаленный репозиторий на локальный компьютер.
2.	git fetch: скачивает данные из удаленного репозитория, но не объединяет их с локальными изменениями.
3.	git pull: скачивает и объединяет изменения из удаленного репозитория с локальными изменениями.
4.	git push: отправляет изменения из локального репозитория в удаленный репозиторий.
5.	git remote: позволяет управлять удаленными репозиториями, например, добавлять, удалять или переименовывать их.
6.	git branch -r: показывает список удаленных веток.
7.	git checkout -b <branch-name> origin/<branch-name>: создает новую локальную ветку из удаленной ветки.
8.	git merge <branch-name>: объединяет выбранную ветку с текущей локальной веткой.

Что бы создать ключ 
$ cd ~
$ mkdir .ssh
$ chmod 700 .ssh
$ cd .ssh
$ ssh-keygen
git config --global user.email "ваш email, зарегистрированный на GitHub"
git config --global user.name "ваше имя на GitHub"
ssh-add ~/.ssh/id_rsa
1.	Запустите командную оболочку и введите команду eval $(ssh-agent). Эта команда запустит SSH-агент в текущей сессии терминала.
2.	Затем выполните команду ssh-add ~/.ssh/id_rsa, чтобы добавить ваш SSH-ключ в SSH-агент.
3.	Если вы все еще получаете ошибку, попробуйте выполнить команду ssh-agent bash, а затем повторите шаг 2.
Если после выполнения этих действий проблема не решена, проверьте, что ваш SSH-ключ находится в каталоге ~/.ssh, и убедитесь, что у вас есть права на чтение и запись в этот каталог и файлы в нем.

команду svn checkout вместо git clone, если ваш репозиторий использует Subversion. Для этого нужно выполнить следующую команду:
javascriptCopy code
svn checkout <repository_url>/trunk/<folder_name> 
Где <repository_url> - URL вашего репозитория, а <folder_name> - имя папки, которую вы хотите скачать.
Например, если у вас есть репозиторий с URL-адресом https://github.com/username/myrepo и вы хотите скачать папку myfolder, то команда будет выглядеть следующим образом:
rubyCopy code
svn checkout https://github.com/username/myrepo/trunk/myfolder 
Это позволит вам загрузить только нужную папку из репозитория, а не весь репозиторий целиком.

