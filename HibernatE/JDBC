JDBC (Java Database Connectivity) - это API (Application Programming Interface), который позволяет Java-приложениям работать с реляционными базами данных. Он предоставляет стандартный интерфейс программирования для создания соединений с базами данных, отправки SQL-запросов и получения результатов. Таким образом, JDBC - это набор инструментов, который облегчает взаимодействие Java-приложений с базами данных.
Ошибки при транзакции
•	Lost Update: Потеря изменений из-за перезаписи одного пользователя другим, что может привести к неконсистентности данных.
•	Dirty Read: Чтение измененных, но еще не подтвержденных данных, которые могут оказаться неверными и неконсистентными.
•	Non-repeatable Read: Чтение одних и тех же данных дважды с разными значениями из-за изменений, сделанных другим пользователем между чтениями.
•	Phantom Read: Возможность появления новых строк, не существовавших при предыдущем чтении, что может привести к непредсказуемым результатам.
 	

Комбинация клавиш Shift + F6 в IntelliJ IDEA запускает рефакторинг имени переменной, метода, класса и т.д. Выделите элемент, который вы хотите переименовать, нажмите на комбинацию клавиш и введите новое имя элемента. IDEA автоматически заменит старое имя на новое во всех местах кода, где это имя используется.

Свойства транщакции 
•	Atomicity: Транзакция должна быть выполнена либо полностью, либо не выполнена вовсе, чтобы избежать непредсказуемых состояний.
•	Consistency: Транзакции должны поддерживать целостность данных и приводить базу данных в согласованное состояние после их завершения.
•	Isolation: Транзакции должны работать независимо друг от друга, чтобы избежать конфликтов и предотвратить изменение данных другими транзакциями.
•	Durability: После завершения транзакции изменения должны быть сохранены и восстановлены в случае сбоев или отказов системы.

Класс Connection в Java используется для установления соединения с базой данных и выполнения SQL-запросов. Он содержит методы для создания запросов, управления транзакциями, установки параметров и получения результатов выполнения запросов. Этот класс предоставляет интерфейс для взаимодействия с базой данных и является ключевым компонентом для работы с JDBC. Взаимодействие с базой данных через Connection может происходить с использованием различных уровней изоляции транзакций, что обеспечивает конкурентный доступ к данным и поддержку целостности данных.

В среде разработки IntelliJ IDEA сочетание клавиш "Ctrl + Alt + V" используется для быстрого извлечения выражения в локальную переменную.
4 5 уровней изоляции 
  
TRANSACTION_NONE: Нет изоляции, транзакции не используются. TRANSACTION_READ_UNCOMMITTED: Данные могут быть прочитаны до подтверждения. 
TRANSACTION_READ_COMMITTED: Данные могут быть прочитаны только после подтверждения. 
TRANSACTION_REPEATABLE_READ: Данные могут быть прочитаны неизменными во время транзакции. 
TRANSACTION_SERIALIZABLE: Транзакции выполняются последовательно, гарантируется полная изоляция. для чего это уложись в 11 слов 

Класс Properties в Java используется для хранения настроек приложения в виде пар "ключ-значение" и для удобного доступа к этим настройкам в коде. Этот класс также позволяет сохранять и загружать настройки из файлов.

Для того чтобы отправить запрос базе даннхых это класс statement 
PrepareStatement Colbastetent
Statement: Statement используется для выполнения простых SQL запросов без параметров. Например: Statement statement = connection.createStatement();
ResultSet resultSet = statement.executeQuery("SELECT * FROM myTable");

PreparedStatement: PreparedStatement позволяет создавать параметризованные запросы, где значения параметров могут быть заданы позже. Он также помогает защитить от SQL-инъекций. Например:
PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM myTable WHERE id = ?");
preparedStatement.setInt(1, 123);
ResultSet resultSet = preparedStatement.executeQuery();

CallableStatement: CallableStatement используется для вызова хранимых процедур в базе данных. Например:

CallableStatement callableStatement = connection.prepareCall("{call myProcedure(?)}");
callableStatement.setString(1, "parameter value");
ResultSet resultSet = callableStatement.executeQuery();
Да, это верно. Когда мы вызываем метод executeUpdate() на объекте PreparedStatement, он выполняет запрос к базе данных и изменяет данные в соответствии с запросом. В данном случае, запрос вставляет новую запись в таблицу users с заданными значениями name, lastName и age.
Вызовы методов setString() и setByte() на объекте PreparedStatement устанавливают значения соответствующих параметров в запросе. В данном случае, мы устанавливаем значения параметров 1, 2 и 3 (т.е. name, lastName и age) на соответствующие значения, переданные в метод saveUser().
Таким образом, при вызове executeUpdate() на объекте PreparedStatement, эти значения будут использоваться в запросе для вставки новой записи в таблицу users.

Существует несколько типов баз данных, которые используют язык SQL:
1.	Реляционные базы данных: это наиболее распространенный тип баз данных. Они используются для хранения и управления данными в виде таблиц, состоящих из строк и столбцов. Примеры реляционных СУБД: MySQL, PostgreSQL, Oracle, Microsoft SQL Server.
2.	Иерархические базы данных: данные в таких базах организованы в виде иерархических древовидных структур, где каждый узел имеет только одного родителя. Примеры иерархических СУБД: IBM Information Management System (IMS), RDM Mobile.
3.	Сетевые базы данных: это тип баз данных, в котором данные организованы в виде графов, где каждый узел может иметь несколько родителей и потомков. Примеры сетевых СУБД: Integrated Data Store (IDS), Integrated Database Management System (IDMS).
4.	Объектно-ориентированные базы данных: в этом типе баз данных данные организованы в виде объектов, с атрибутами и методами. Примеры ОО-СУБД: ObjectStore, Objectivity/DB, Versant Object Database.

1.	Команды DML (Data Manipulation Language) изменяют данные в таблицах: SELECT, INSERT, UPDATE, DELETE.
2.	Команды DDL (Data Definition Language) определяют структуру базы данных: CREATE, ALTER, DROP, TRUNCATE.
3.	Команды TCL (Transaction Control Language) управляют транзакциями: COMMIT, ROLLBACK, SAVEPOINT.
4.	Команды DCL (Data Control Language) управляют правами доступа и безопасностью: GRANT, REVOKE.

Для того чтобы слделать подключение к базе нужно создать объект Connection 
И воспользоваться DriverMenager
Шаблон проектирования  MVC –
Model->View->
Controller->
Controller Раздаточная
->Model – Кухня->edaView->
Вид – интерфейс , Модель – метод запускается обработчиком . Контроллер- обработчик запросов логика навигации
MVC - это паттерн проектирования, который разделяет приложение на три компонента: Модель (Model), Представление (View) и Контроллер (Controller).
Модель (Model) - это компонент, который отвечает за хранение данных и логику их обработки. В нашем примере с банкоматом, это может быть база данных, которая хранит информацию о балансе клиента и операциях, которые он совершал.
Представление (View) - это компонент, который отвечает за отображение данных на экране и взаимодействие с пользователем. В нашем примере с банкоматом, это может быть экран, на котором пользователь видит свой баланс и выбирает операции, которые он хочет совершить.
Контроллер (Controller) - это компонент, который отвечает за обработку действий пользователя и связывает модель и представление. В нашем примере с банкоматом, это может быть программа, которая принимает данные от пользователя, проверяет их на правильность и обращается к модели для выполнения операции.
Таким образом, в MVC-архитектуре, модель содержит данные и бизнес-логику, представление - отображает данные пользователю, а контроллер связывает модель и представление и управляет взаимодействием с пользователем.
Аналогия с банкоматом хорошо иллюстрирует эту архитектуру, так как в банкомате модель - это база данных, которая хранит информацию о балансе и операциях, представление - это экран банкомата, на котором пользователь видит свой баланс и выбирает операции, а контроллер - это программа, которая обрабатывает ввод пользователя и обращается к модели для выполнения операции.


public List<User> getAllUsers() {
    List<User> userList = new ArrayList<>();

    String sql = """
            
            select *from users""";

    try (Statement statement = connection.createStatement()) {

        try (ResultSet resultset = statement.executeQuery(sql)) {
            while (resultset.next()) {
                int id = Integer.parseInt(resultset.getObject(1).toString());
                String name = resultset.getObject(2).toString();
                String lastname = resultset.getObject(3).toString();
                int age = Integer.parseInt(resultset.getObject(4).toString());
                User user = new User((long) id,name,lastname, (byte) age);
                userList.add(user);
            }
код для поиска по id
